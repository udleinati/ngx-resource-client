{"version":3,"file":"http.service.js","sourceRoot":"","sources":["../../src/sources/http.service.ts"],"names":[],"mappings":";;;;AAAA,OAAO,EAAE,UAAU,EAAE,MAAM,eAAe,CAAC;AAE3C,OAAO,EAAE,UAAU,EAAE,WAAW,EAAa,MAAM,sBAAsB,CAAC;AAC1E,OAAO,EAAE,aAAa,EAAE,MAAM,mBAAmB,CAAC;AAClD,OAAO,EAAE,KAAK,EAAE,GAAG,EAAE,MAAM,gBAAgB,CAAC;AAK5C,MAAM;;;;;gBAIyB,IAAgB,EAAU,eAA8B;QAAxD,SAAI,GAAJ,IAAI,CAAY;QAAU,oBAAe,GAAf,eAAe,CAAe;4BAFf,EAAE;;;;;;;;IAI/D,IAAI,CAAC,IAAY,EAAE,MAAc,EAAE,IAAwB;;QAC9D,IAAI,GAAG,GAAG;YACN,IAAI,EAAE,IAAI,IAAI,IAAI;YAClB,OAAO,EAAE,IAAI,WAAW,CAAC;gBACrB,cAAc,EAAE,0BAA0B;gBAC1C,MAAM,EAAE,0BAA0B;aACrC,CAAC;SACL,CAAC;;QAGF,IAAI,MAAM,KAAK,KAAK,EAAE;YAClB,IAAI,CAAC,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,EAAE;;gBAC1B,IAAI,GAAG,GAAG,IAAI,CAAC,IAAI,CAAC,OAAO,CAAgB,MAAM,EAAE,IAAI,CAAC,eAAe,CAAC,GAAG,GAAG,IAAI,EAAE,GAAG,CAAC,CAAC,IAAI,CACzF,GAAG,CAAC,GAAG,EAAE;oBACL,OAAO,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,CAAC;iBAClC,CAAC,EACF,KAAK,EAAE,CACV,CAAC;gBACF,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,GAAG,GAAG,CAAC;gBAE9B,OAAO,GAAG,CAAC;aACd;YAED,OAAO,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,CAAC;SAClC;QAED,OAAO,IAAI,CAAC,IAAI,CAAC,OAAO,CAAgB,MAAM,EAAE,IAAI,CAAC,eAAe,CAAC,GAAG,GAAG,IAAI,EAAE,GAAG,CAAC,CAAC,IAAI,CACtF,GAAG,CAAC,GAAG,EAAE;YACL,OAAO,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,CAAC;SAClC,CAAC,EACF,KAAK,EAAE,CACV,CAAC;;;;YAtCT,UAAU;;;;YANF,UAAU;YACV,aAAa","sourcesContent":["import { Injectable } from '@angular/core';\nimport { IDocumentResource } from '../interfaces/data-object';\nimport { HttpClient, HttpHeaders, HttpEvent } from '@angular/common/http';\nimport { JsonapiConfig } from '../jsonapi-config';\nimport { share, tap } from 'rxjs/operators';\nimport { Observable } from 'rxjs';\nimport { IDocumentData } from '../interfaces/document';\n\n@Injectable()\nexport class Http {\n    // NOTE: GET requests are stored in a this object to prevent duplicate requests\n    public get_requests: { [key: string]: Observable<IDocumentData> } = {};\n\n    public constructor(private http: HttpClient, private rsJsonapiConfig: JsonapiConfig) {}\n\n    public exec(path: string, method: string, data?: IDocumentResource): Observable<IDocumentData> {\n        let req = {\n            body: data || null,\n            headers: new HttpHeaders({\n                'Content-Type': 'application/vnd.api+json',\n                Accept: 'application/vnd.api+json'\n            })\n        };\n\n        // NOTE: prevent duplicate GET requests\n        if (method === 'get') {\n            if (!this.get_requests[path]) {\n                let obs = this.http.request<IDocumentData>(method, this.rsJsonapiConfig.url + path, req).pipe(\n                    tap(() => {\n                        delete this.get_requests[path];\n                    }),\n                    share()\n                );\n                this.get_requests[path] = obs;\n\n                return obs;\n            }\n\n            return this.get_requests[path];\n        }\n\n        return this.http.request<IDocumentData>(method, this.rsJsonapiConfig.url + path, req).pipe(\n            tap(() => {\n                delete this.get_requests[path];\n            }),\n            share()\n        );\n    }\n}\n"]}