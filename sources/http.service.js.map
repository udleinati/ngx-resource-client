{"version":3,"file":"http.service.js","sourceRoot":"","sources":["../../src/sources/http.service.ts"],"names":[],"mappings":"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","sourcesContent":["import { Injectable, Inject, PLATFORM_ID, Optional } from '@angular/core';\nimport { REQUEST } from '@nguniversal/express-engine/tokens';\nimport { IDocumentResource } from '../interfaces/data-object';\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { isPlatformServer } from '@angular/common';\nimport { JsonapiConfig } from '../jsonapi-config';\nimport { share, tap } from 'rxjs/operators';\nimport { Observable } from 'rxjs';\nimport { IDocumentData } from '../interfaces/document';\n\n@Injectable()\nexport class Http {\n    // NOTE: GET requests are stored in a this object to prevent duplicate requests\n    public get_requests: { [key: string]: Observable<IDocumentData> } = {};\n\n    public constructor(@Optional() @Inject(REQUEST) private request: any, @Inject(PLATFORM_ID) private platformId: any, private http: HttpClient, private rsJsonapiConfig: JsonapiConfig) {}\n\n    public exec(path: string, method: string, data?: IDocumentResource): Observable<IDocumentData> {\n        let url = this.rsJsonapiConfig.url\n        let req = {\n            body: data || null,\n            headers: new HttpHeaders({\n                'Content-Type': 'application/vnd.api+json',\n                Accept: 'application/vnd.api+json'\n            })\n        };\n\n        if (isPlatformServer(this.platformId) && !url.match(/^http\\:|^https\\:|^\\/\\//)) {\n            const headers = this.request.headers\n            const proto = (headers['x-forwarded-proto']) ? headers['x-forwarded-proto'].split(',')[0] : (headers['proto']) ? headers['proto'] : 'http'\n            const host = (headers['x-forwarded-host']) ? headers['x-forwarded-host'].split(',')[0] : headers['host']\n            url = `${proto}://${host}${url}`\n        }\n\n        // NOTE: prevent duplicate GET requests\n        if (method === 'get') {\n            if (!this.get_requests[path]) {\n                let obs = this.http.request<IDocumentData>(method, url + path, req).pipe(\n                    tap(() => {\n                        delete this.get_requests[path];\n                    }),\n                    share()\n                );\n                this.get_requests[path] = obs;\n\n                return obs;\n            }\n\n            return this.get_requests[path];\n        }\n\n        return this.http.request<IDocumentData>(method, url + path, req).pipe(\n            tap(() => {\n                delete this.get_requests[path];\n            }),\n            share()\n        );\n    }\n}\n"]}