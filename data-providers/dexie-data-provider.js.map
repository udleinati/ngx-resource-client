{"version":3,"file":"dexie-data-provider.js","sourceRoot":"","sources":["../../src/data-providers/dexie-data-provider.ts"],"names":[],"mappings":";;;;;;;;;;;;AACA,OAAO,KAAK,MAAM,OAAO,CAAC;AAE1B,MAAM;;QAIE,IAAI,iBAAiB,CAAC,EAAE,EAAE;YACtB,OAAO;SACV;QACD,iBAAiB,CAAC,EAAE,GAAG,IAAI,KAAK,CAAC,qBAAqB,CAAC,CAAC;QACxD,iBAAiB,CAAC,EAAE,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC;YACnC,WAAW,EAAE,EAAE;YACf,QAAQ,EAAE,EAAE;SACf,CAAC,CAAC;;;;;;;IAGM,UAAU,CAAC,GAAW,EAAE,UAAU,GAAG,UAAU;;YACxD,MAAM,iBAAiB,CAAC,EAAE,CAAC,IAAI,EAAE,CAAC;;YAClC,MAAM,IAAI,GAAG,MAAM,iBAAiB,CAAC,EAAE,CAAC,KAAK,CAAC,UAAU,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;YACnE,IAAI,IAAI,KAAK,SAAS,EAAE;gBACpB,MAAM,IAAI,KAAK,CAAC,GAAG,GAAG,aAAa,CAAC,CAAC;aACxC;YAED,OAAO,IAAI,CAAC;;;;;;;;IAGH,WAAW,CAAC,IAAmB,EAAE,UAAU,GAAG,UAAU;;;YACjE,IAAI,IAAI,GAAG,EAAE,CAAC;YACd,MAAM,iBAAiB,CAAC,EAAE;iBACrB,KAAK,CAAC,UAAU,CAAC;iBACjB,KAAK,CAAC,KAAK,CAAC;iBACZ,KAAK,CAAC,IAAI,CAAC;iBACX,IAAI,CAAC,OAAO,CAAC,EAAE;gBACZ,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,IAAI,GAAG,GAAG,GAAG,OAAO,CAAC,IAAI,CAAC,EAAE,CAAC,GAAG,OAAO,CAAC;aAC7D,CAAC,CAAC;;YAGP,OAAO,IAAI,CAAC,GAAG,CAAC,GAAG,CAAC,EAAE;gBAClB,OAAO,IAAI,CAAC,GAAG,CAAC,CAAC;aACpB,CAAC,CAAC;;;;;;;;;IAKM,cAAc,CAAC,cAAsB,EAAE,OAAgB,EAAE,UAAU,GAAG,UAAU;;YACzF,OAAO,iBAAiB,CAAC,EAAE,CAAC,IAAI,EAAE,CAAC,IAAI,CAAC,GAAS,EAAE;gBAC/C,IAAI,cAAc,KAAK,EAAE,EAAE;oBACvB,OAAO,iBAAiB,CAAC,EAAE,CAAC,KAAK,CAAC,UAAU,CAAC,CAAC,KAAK,EAAE,CAAC;iBACzD;qBAAM;oBACH,OAAO,iBAAiB,CAAC,EAAE;yBACtB,KAAK,CAAC,UAAU,CAAC;yBACjB,KAAK,CAAC,KAAK,CAAC;yBACZ,UAAU,CAAC,cAAc,CAAC;yBAC1B,MAAM,EAAE;yBACR,IAAI,CAAC,GAAG,EAAE,CAAC,SAAS,CAAC,CAAC;iBAC9B;cACJ,CAAC,CAAC;;;;;;;;IAGM,YAAY,CAAC,QAAyB,EAAE,UAAU,GAAG,UAAU;;;YACxE,IAAI,IAAI,GAAkB,EAAE,CAAC;;YAC7B,IAAI,KAAK,GAAG,QAAQ,CAAC,GAAG,CAAC,OAAO,CAAC,EAAE;gBAC/B,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC;gBAEvB,OAAO,OAAO,CAAC,OAAO,CAAC;aAC1B,CAAC,CAAC;YAEH,OAAO,iBAAiB,CAAC,EAAE,CAAC,IAAI,EAAE,CAAC,IAAI,CAAC,GAAG,EAAE;gBACzC,iBAAiB,CAAC,EAAE,CAAC,KAAK,CAAC,UAAU,CAAC,CAAC,OAAO,CAAC,KAAK,EAAE,IAAI,CAAC,CAAC;aAC/D,CAAC,CAAC;;;CAEV","sourcesContent":["import { IDataProvider, IObject, IElement } from './data-provider';\nimport Dexie from 'dexie';\n\nexport class DexieDataProvider implements IDataProvider {\n    private static db: Dexie;\n\n    public constructor() {\n        if (DexieDataProvider.db) {\n            return;\n        }\n        DexieDataProvider.db = new Dexie('dexie_data_provider');\n        DexieDataProvider.db.version(1).stores({\n            collections: '',\n            elements: ''\n        });\n    }\n\n    public async getElement(key: string, table_name = 'elements'): Promise<IObject | Array<IObject>> {\n        await DexieDataProvider.db.open();\n        const data = await DexieDataProvider.db.table(table_name).get(key);\n        if (data === undefined) {\n            throw new Error(key + ' not found.');\n        }\n\n        return data;\n    }\n\n    public async getElements(keys: Array<string>, table_name = 'elements'): Promise<Array<IObject>> {\n        let data = {};\n        await DexieDataProvider.db\n            .table(table_name)\n            .where(':id')\n            .anyOf(keys)\n            .each(element => {\n                data[element.data.type + '.' + element.data.id] = element;\n            });\n\n        // we need to maintain same order, database return ordered by key\n        return keys.map(key => {\n            return data[key];\n        });\n    }\n\n    // @todo implement dexie.modify(changes)\n    // @todo test\n    public async updateElements(key_start_with: string, changes: IObject, table_name = 'elements'): Promise<void> {\n        return DexieDataProvider.db.open().then(async () => {\n            if (key_start_with === '') {\n                return DexieDataProvider.db.table(table_name).clear();\n            } else {\n                return DexieDataProvider.db\n                    .table(table_name)\n                    .where(':id')\n                    .startsWith(key_start_with)\n                    .delete()\n                    .then(() => undefined);\n            }\n        });\n    }\n\n    public async saveElements(elements: Array<IElement>, table_name = 'elements'): Promise<void> {\n        let keys: Array<string> = [];\n        let items = elements.map(element => {\n            keys.push(element.key);\n\n            return element.content;\n        });\n\n        return DexieDataProvider.db.open().then(() => {\n            DexieDataProvider.db.table(table_name).bulkPut(items, keys);\n        });\n    }\n}\n"]}