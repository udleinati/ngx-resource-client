{"version":3,"file":"json-ripper.js","sourceRoot":"","sources":["../../src/services/json-ripper.ts"],"names":[],"mappings":"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","sourcesContent":["import { ICacheableDataCollection } from './../interfaces/data-collection';\nimport { ICacheableDocumentResource } from './../interfaces/data-object';\nimport { Resource } from './../resource';\nimport { DocumentResource } from './../document-resource';\nimport { DexieDataProvider } from '../data-providers/dexie-data-provider';\nimport { IDataProvider, IElement } from './../data-providers/data-provider';\nimport { DocumentCollection } from '../document-collection';\n\ninterface IStoredCollection {\n    updated_at: number;\n    keys: Array<string>;\n}\nexport class JsonRipper {\n    private dataProvider: IDataProvider;\n\n    public constructor() {\n        this.dataProvider = new DexieDataProvider();\n    }\n\n    public async getResource(key: string, include: Array<string> = []): Promise<ICacheableDocumentResource> {\n        let stored_resource = (await this.getDataResources([key])).shift();\n\n        if (stored_resource === undefined) {\n            throw new Error(`Resource ${key} don't found.`);\n        }\n\n        if (include.length === 0) {\n            return stored_resource;\n        }\n\n        let included_keys: Array<string> = [];\n        include.forEach(relationship_alias => {\n            // @NOTE: typescript doesn't detect throwError added a few lines above when stored_resource === undefnied\n            if (!stored_resource || !stored_resource.data.relationships || !stored_resource.data.relationships[relationship_alias]) {\n                // this is a classic problem when relationship property is missing on included resources\n                throw new Error('We dont have relation_alias on stored data resource');\n            }\n\n            const relationship = stored_resource.data.relationships[relationship_alias].data;\n            if (relationship instanceof Array) {\n                relationship.forEach(related_resource => {\n                    included_keys.push(JsonRipper.getResourceKey(related_resource));\n                });\n            } else if (relationship && 'id' in relationship) {\n                included_keys.push(JsonRipper.getResourceKey(relationship));\n            }\n        });\n\n        let included_resources = await this.getDataResources(included_keys);\n\n        return {\n            ...stored_resource,\n            included: included_resources.map(document_resource => document_resource.data)\n        };\n    }\n\n    public async getCollection(url: string, include: Array<string> = []): Promise<ICacheableDataCollection> {\n        let stored_collection = await this.getDataCollection(url);\n        let data_resources = await this.getDataResources(stored_collection.keys);\n\n        let ret = {\n            data: data_resources.map(data_resource => data_resource.data),\n            cache_last_update: stored_collection.updated_at\n        };\n\n        if (include.length === 0) {\n            return ret;\n        }\n\n        let included_keys: Array<string> = [];\n        include.forEach(relationship_alias => {\n            data_resources.forEach(resource => {\n                if (!resource.data.relationships || !resource.data.relationships[relationship_alias]) {\n                    return;\n                }\n\n                const relationship = resource.data.relationships[relationship_alias].data;\n                if (relationship instanceof Array) {\n                    relationship.forEach(related_resource => {\n                        included_keys.push(JsonRipper.getResourceKey(related_resource));\n                    });\n                } else if ('id' in relationship) {\n                    included_keys.push(JsonRipper.getResourceKey(relationship));\n                }\n            });\n        });\n\n        let included_resources = await this.getDataResources(included_keys);\n\n        return {\n            ...ret,\n            included: included_resources.map(document_resource => document_resource.data)\n        };\n    }\n\n    private async getDataCollection(url: string): Promise<IStoredCollection> {\n        return <Promise<IStoredCollection>>this.dataProvider.getElement(url, 'collections');\n    }\n\n    private async getDataResources(keys: Array<string>): Promise<Array<ICacheableDocumentResource>> {\n        return <Promise<Array<ICacheableDocumentResource>>>this.dataProvider.getElements(keys, 'elements');\n    }\n\n    public saveCollection(url: string, collection: DocumentCollection, include: Array<string> = []): void {\n        this.dataProvider.saveElements(JsonRipper.collectionToElement(url, collection), 'collections');\n        this.dataProvider.saveElements(JsonRipper.collectionResourcesToElements(collection, include), 'elements');\n    }\n\n    public async saveResource(resource: Resource, include = []): Promise<void> {\n        return this.dataProvider.saveElements(\n            JsonRipper.toResourceElements(JsonRipper.getResourceKey(resource), resource, include),\n            'elements'\n        );\n    }\n\n    private static collectionToElement(url: string, collection: DocumentCollection): Array<IElement> {\n        let collection_element = {\n            key: url,\n            content: { updated_at: Date.now(), keys: <Array<string>>[] }\n        };\n        collection.data.forEach(resource => {\n            let key = JsonRipper.getResourceKey(resource);\n            collection_element.content.keys.push(key);\n        });\n\n        return [collection_element];\n    }\n\n    private static collectionResourcesToElements(collection: DocumentCollection, include: Array<string> = []): Array<IElement> {\n        let elements: Array<IElement> = [];\n        collection.data.forEach(resource => {\n            let key = JsonRipper.getResourceKey(resource);\n            elements.push(...JsonRipper.toResourceElements(key, resource, include));\n        });\n\n        return elements;\n    }\n\n    public static toResourceElements(key: string, resource: Resource, include: Array<string> = []): Array<IElement> {\n        let elements: Array<IElement> = [\n            {\n                key: key,\n                content: resource.toObject()\n            }\n        ];\n        elements[0].content.data.cache_last_update = Date.now();\n\n        include.forEach(relationship_alias => {\n            const relationship = resource.relationships[relationship_alias];\n            if (relationship instanceof DocumentCollection) {\n                relationship.data.forEach(related_resource => {\n                    elements.push(JsonRipper.getElement(related_resource));\n                });\n            } else if (relationship instanceof DocumentResource) {\n                if (relationship.data === null || relationship.data === undefined) {\n                    return;\n                }\n                elements.push(JsonRipper.getElement(relationship.data));\n            }\n        });\n\n        return elements;\n    }\n\n    public static getResourceKey(resource: Resource): string {\n        return resource.type + '.' + resource.id;\n    }\n\n    private static getElement(resource: Resource): IElement {\n        return {\n            key: JsonRipper.getResourceKey(resource),\n            content: resource.toObject()\n        };\n    }\n\n    public async deprecateCollection(key_start_with: string): Promise<void> {\n        return this.dataProvider.updateElements(key_start_with, {}, 'collections');\n    }\n}\n"]}