{"version":3,"file":"path-builder.js","sourceRoot":"","sources":["../../src/services/path-builder.ts"],"names":[],"mappings":";;;;AACA,OAAO,EAAE,yBAAyB,EAAE,MAAM,2BAA2B,CAAC;AACtE,OAAO,EAAE,IAAI,EAAE,MAAM,SAAS,CAAC;AAG/B,MAAM;;qBAC4B,EAAE;wBACC,EAAE;0BACG,EAAE;;;;;;;IAEjC,WAAW,CAAC,OAAgB,EAAE,SAA8C,EAAE;QACjF,IAAI,CAAC,UAAU,CAAC,OAAO,CAAC,UAAU,EAAE,CAAC,CAAC;QACtC,IAAI,MAAM,CAAC,UAAU,EAAE;YACnB,IAAI,CAAC,UAAU,CAAC,MAAM,CAAC,UAAU,CAAC,CAAC;SACtC;QACD,IAAI,CAAC,UAAU,CAAC,OAAO,CAAC,OAAO,EAAE,CAAC,CAAC;QACnC,IAAI,MAAM,CAAC,OAAO,EAAE;YAChB,IAAI,CAAC,UAAU,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC;SACnC;QACD,IAAI,yBAAyB,CAAC,MAAM,CAAC,IAAI,MAAM,CAAC,WAAW,EAAE;YACzD,IAAI,CAAC,UAAU,CAAC,CAAC,GAAG,IAAI,CAAC,QAAQ,EAAE,GAAG,MAAM,CAAC,WAAW,CAAC,CAAC,CAAC;SAC9D;QACD,IAAI,MAAM,CAAC,MAAM,IAAI,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC,MAAM,GAAG,CAAC,EAAE;YACxD,KAAK,IAAI,aAAa,IAAI,MAAM,CAAC,MAAM,EAAE;;gBACrC,IAAI,YAAY,GAAG,UAAU,aAAa,KAAK,MAAM,CAAC,MAAM,CAAC,aAAa,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC;gBACxF,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC;aACtC;SACJ;;;;;;IAGE,UAAU,CAAC,KAAa;QAC3B,IAAI,KAAK,KAAK,EAAE,EAAE;YACd,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;SAC1B;;;;;IAGE,WAAW;QACd,OAAO,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,GAAG,CAAC,GAAG,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;;;;;IAGrD,GAAG;;QACN,IAAI,MAAM,GAAG,CAAC,GAAG,IAAI,CAAC,UAAU,CAAC,CAAC;QAElC,IAAI,IAAI,CAAC,QAAQ,CAAC,MAAM,GAAG,CAAC,EAAE;YAC1B,MAAM,CAAC,IAAI,CAAC,UAAU,GAAG,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC;SACrD;QAED,OAAO,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,GAAG,CAAC,GAAG,CAAC,MAAM,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,gBAAgB,CAAC,eAAe,CAAC,gBAAgB,GAAG,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC;;;;;;IAG/H,UAAU,CAAC,aAA4B;QAC3C,IAAI,CAAC,QAAQ,GAAG,aAAa,CAAC;;CAErC","sourcesContent":["import { IParamsCollection, IParamsResource } from '../interfaces';\nimport { implementsIParamsResource } from '../interfaces/type-checks';\nimport { Core } from '../core';\nimport { Service } from '../service';\n\nexport class PathBuilder {\n    public paths: Array<string> = [];\n    public includes: Array<string> = [];\n    protected get_params: Array<string> = [];\n\n    public applyParams(service: Service, params: IParamsResource | IParamsCollection = {}) {\n        this.appendPath(service.getPrePath());\n        if (params.beforepath) {\n            this.appendPath(params.beforepath);\n        }\n        this.appendPath(service.getPath());\n        if (params.include) {\n            this.setInclude(params.include);\n        }\n        if (implementsIParamsResource(params) && params.include_get) {\n            this.setInclude([...this.includes, ...params.include_get]);\n        }\n        if (params.fields && Object.keys(params.fields).length > 0) {\n            for (let resource_type in params.fields) {\n                let fields_param = `fields[${resource_type}]=${params.fields[resource_type].join(',')}`;\n                this.get_params.push(fields_param);\n            }\n        }\n    }\n\n    public appendPath(value: string) {\n        if (value !== '') {\n            this.paths.push(value);\n        }\n    }\n\n    public getForCache(): string {\n        return this.paths.join('/') + this.get_params.join('/');\n    }\n\n    public get(): string {\n        let params = [...this.get_params];\n\n        if (this.includes.length > 0) {\n            params.push('include=' + this.includes.join(','));\n        }\n\n        return this.paths.join('/') + (params.length > 0 ? Core.injectedServices.rsJsonapiConfig.params_separator + params.join('&') : '');\n    }\n\n    private setInclude(strings_array: Array<string>) {\n        this.includes = strings_array;\n    }\n}\n"]}