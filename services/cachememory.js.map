{"version":3,"file":"cachememory.js","sourceRoot":"","sources":["../../src/services/cachememory.ts"],"names":[],"mappings":"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","sourcesContent":["import { Base } from './base';\nimport { Resource } from '../resource';\nimport { Converter } from './converter';\nimport { DocumentCollection } from '../document-collection';\nimport { IObjectsById } from '../interfaces';\n\nexport class CacheMemory<R extends Resource = Resource> {\n    private resources: IObjectsById<Resource> = {};\n    private collections: { [url: string]: DocumentCollection<R> } = {};\n    private static instance: CacheMemory | null;\n\n    private constructor() {}\n\n    public static getInstance(): CacheMemory {\n        if (!CacheMemory.instance) {\n            CacheMemory.instance = new CacheMemory();\n        }\n\n        return CacheMemory.instance;\n    }\n\n    public clearCache() {\n        this.resources = {};\n        this.collections = {};\n        CacheMemory.instance = null;\n    }\n\n    public getResource(type: string, id: string): Resource | null {\n        if (this.getKey(type, id) in this.resources) {\n            return this.resources[this.getKey(type, id)];\n        }\n\n        return null;\n    }\n\n    public getResourceOrFail(type: string, id: string): Resource {\n        if (this.getKey(type, id) in this.resources) {\n            return this.resources[this.getKey(type, id)];\n        }\n\n        throw new Error('The requested resource does not exist in cache memory');\n    }\n\n    private getKey(type: string, id: string): string {\n        return type + '.' + id;\n    }\n\n    public getOrCreateCollection(url: string): DocumentCollection<R> {\n        if (!(url in this.collections)) {\n            this.collections[url] = new DocumentCollection();\n            this.collections[url].source = 'new';\n        }\n\n        return this.collections[url];\n    }\n\n    public setCollection(url: string, collection: DocumentCollection<R>): void {\n        // v1: clone collection, because after maybe delete items for localfilter o pagination\n        if (!(url in this.collections)) {\n            this.collections[url] = new DocumentCollection();\n        }\n        for (let i = 0; i < collection.data.length; i++) {\n            let resource = collection.data[i];\n            // this.collections[url].data.push(resource);\n            this.setResource(resource, true);\n        }\n        this.collections[url].data = collection.data;\n        this.collections[url].page = collection.page;\n        this.collections[url].cache_last_update = collection.cache_last_update;\n    }\n\n    public getOrCreateResource(type: string, id: string): Resource {\n        let resource = this.getResource(type, id);\n        if (resource !== null) {\n            return resource;\n        }\n\n        resource = Converter.getServiceOrFail(type).new();\n        resource.id = id;\n        // needed for a lot of request (all and get, tested on multinexo.com)\n        this.setResource(resource, false);\n\n        return resource;\n    }\n\n    public setResource(resource: Resource, update_lastupdate = false): void {\n        if (this.getKey(resource.type, resource.id) in this.resources) {\n            this.fillExistentResource(resource);\n        } else {\n            this.resources[this.getKey(resource.type, resource.id)] = resource;\n        }\n        this.resources[this.getKey(resource.type, resource.id)].cache_last_update = update_lastupdate ? Date.now() : 0;\n    }\n\n    public deprecateCollections(path_includes: string = ''): boolean {\n        for (let collection_key in this.collections) {\n            if (collection_key.includes(path_includes)) {\n                this.collections[collection_key].cache_last_update = 0;\n            }\n        }\n\n        return true;\n    }\n\n    public removeResource(type: string, id: string): void {\n        let resource = this.getResource(type, id);\n        if (!resource) {\n            return;\n        }\n        Base.forEach(this.collections, (value, url) => {\n            value.data.splice(\n                value.data.findIndex(\n                    (resource_on_collection: Resource) => resource_on_collection.type === type && resource_on_collection.id === id\n                ),\n                1\n            );\n        });\n        resource.attributes = {}; // just for confirm deletion on view\n\n        // this.resources[id].relationships = {}; // just for confirm deletion on view\n        for (let relationship in resource.relationships) {\n            if (resource.relationships[relationship].data === null || resource.relationships[relationship].data === undefined) {\n                continue;\n            }\n            if (resource.relationships[relationship].data instanceof Array) {\n                resource.relationships[relationship].data = []; // just in case that there is a for loop using it\n            } else if (resource.relationships[relationship].data instanceof Object) {\n                delete resource.relationships[relationship].data;\n            }\n        }\n        delete this.resources[this.getKey(type, id)];\n    }\n\n    private fillExistentResource(source: Resource): void {\n        let destination = this.getResourceOrFail(source.type, source.id);\n\n        destination.attributes = { ...destination.attributes, ...source.attributes };\n\n        destination.relationships = destination.relationships || source.relationships;\n\n        // remove relationships on destination resource\n        // for (let type_alias in destination.relationships) {\n        //     // problem with no declared services\n        //     if (destination.relationships[type_alias].data === undefined) {\n        //         continue;\n        //     }\n\n        //     if (!(type_alias in source.relationships)) {\n        //         delete destination.relationships[type_alias];\n        //     } else {\n        //         // relation is a collection\n        //         let collection = <DocumentCollection>destination.relationships[type_alias];\n        //         // TODO: talkto Pablo, this could be and Object... (following IF statement added by Maxi)\n        //         if (!Array.isArray(collection.data)) {\n        //             continue;\n        //         }\n        //         for (let resource of collection.data) {\n        //             if (collection.find(resource.id) === null) {\n        //                 delete destination.relationships[type_alias];\n        //             }\n        //         }\n        //     }\n        // }\n\n        // // add source relationships to destination\n        // for (let type_alias in source.relationships) {\n        //     // problem with no declared services\n        //     if (source.relationships[type_alias].data === undefined) {\n        //         continue;\n        //     }\n\n        //     if (source.relationships[type_alias].data === null) {\n        //         // TODO: FE-92 --- check and improve conditions when building has-one relationships\n        //         destination.relationships[type_alias].data = null;\n        //         continue;\n        //     }\n\n        //     if ('id' in source.relationships[type_alias].data) {\n        //         destination.addRelationship(<Resource>source.relationships[type_alias].data, type_alias);\n        //     } else {\n        //         destination.addRelationships(<Array<Resource>>source.relationships[type_alias].data, type_alias);\n        //     }\n        // }\n    }\n}\n"]}