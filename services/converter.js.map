{"version":3,"file":"converter.js","sourceRoot":"","sources":["../../src/services/converter.ts"],"names":[],"mappings":"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","sourcesContent":["import { CacheMemory } from './cachememory';\n// import * as angular from 'angular';\nimport { Core } from '../core';\nimport { Resource } from '../resource';\nimport { Service } from '../service';\nimport { IResourcesByType, IObjectsById } from '../interfaces';\nimport { IDocumentResource } from '../interfaces/data-object';\nimport { IDataCollection } from '../interfaces/data-collection';\nimport { IDataResource } from '../interfaces/data-resource';\nimport { isDevMode } from '@angular/core';\n\nexport class Converter<R extends Resource> {\n    /*\n    Convert json arrays (like included) to an indexed Resources array by [type][id]\n    */\n    public static json_array2resources_array_by_type(json_array: Array<IDataResource>): IResourcesByType {\n        let all_resources: IObjectsById<Resource> = {};\n        let resources_by_type: IResourcesByType = {};\n\n        Converter.json_array2resources_array(json_array, all_resources);\n        for (const key in all_resources) {\n            let resource = all_resources[key];\n\n            if (!(resource.type in resources_by_type)) {\n                resources_by_type[resource.type] = {};\n            }\n            resources_by_type[resource.type][resource.id] = resource;\n        }\n\n        return resources_by_type;\n    }\n\n    public static json2resource(json_resource: IDataResource, instance_relationships): Resource {\n        let resource_service = Converter.getService(json_resource.type);\n        if (resource_service) {\n            return Converter.procreate(json_resource);\n        } else {\n            if (isDevMode()) {\n                console.warn(\n                    '`' + json_resource.type + '`',\n                    'service not found on json2resource().',\n                    'Use @Autoregister() on service and inject it on component.'\n                );\n            }\n            let temp = new Resource();\n            temp.id = json_resource.id;\n            temp.type = json_resource.type;\n\n            return temp;\n        }\n    }\n\n    public static getService(type: string): Service | undefined {\n        let resource_service = Core.me.getResourceService(type);\n\n        return resource_service;\n    }\n\n    public static getServiceOrFail(type: string): Service {\n        let resource_service = Core.me.getResourceServiceOrFail(type);\n\n        return resource_service;\n    }\n\n    public static buildIncluded(document_from: IDataCollection | IDocumentResource): IResourcesByType {\n        if ('included' in document_from && document_from.included) {\n            return Converter.json_array2resources_array_by_type(document_from.included);\n        }\n\n        return {};\n    }\n\n    /* return a resource type(resoruce_service) with data(data) */\n    private static procreate(data: IDataResource): Resource {\n        if (!('type' in data && 'id' in data)) {\n            console.error('Jsonapi Resource is not correct', data);\n        }\n\n        let resource: Resource = CacheMemory.getInstance().getOrCreateResource(data.type, data.id);\n        resource.fill({ data: data });\n\n        resource.is_new = false;\n\n        return resource;\n    }\n\n    /*\n    Convert json arrays (like included) to an Resources arrays without [keys]\n    */\n    private static json_array2resources_array(json_array: Array<IDataResource>, destination_array: IObjectsById<Resource> = {}): void {\n        for (let data of json_array) {\n            let resource = Converter.json2resource(data, false);\n            destination_array[resource.type + '_' + resource.id] = resource;\n        }\n    }\n}\n"]}