{"version":3,"file":"resource-relationships-converter.js","sourceRoot":"","sources":["../../src/services/resource-relationships-converter.ts"],"names":[],"mappings":"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","sourcesContent":["import { CacheMemory } from './cachememory';\nimport { IResourcesByType } from '../interfaces';\nimport { IDataCollection } from '../interfaces/data-collection';\nimport { IDocumentResource } from '../interfaces/data-object';\nimport { IDataResource } from '../interfaces/data-resource';\nimport { Resource } from '../resource';\nimport { DocumentCollection } from '../document-collection';\nimport { IRelationships } from '../interfaces/relationship';\nimport { DocumentResource } from '../document-resource';\nimport { isDevMode } from '@angular/core';\n\nexport class ResourceRelationshipsConverter {\n    private getService: Function;\n    private relationships_from: object;\n    private relationships_dest: IRelationships;\n    private included_resources: IResourcesByType;\n\n    public constructor(\n        getService: Function,\n        relationships_from: object,\n        relationships_dest: IRelationships,\n        included_resources: IResourcesByType\n    ) {\n        this.getService = getService;\n        this.relationships_from = relationships_from;\n        this.relationships_dest = relationships_dest;\n        this.included_resources = included_resources;\n    }\n\n    public buildRelationships(): void {\n        // recorro los relationships levanto el service correspondiente\n        for (const relation_alias in this.relationships_from) {\n            let relation_from_value: IDataCollection & IDocumentResource = this.relationships_from[relation_alias];\n\n            if (this.relationships_dest[relation_alias] && relation_from_value.data === null) {\n                // TODO: FE-92 --- check and improve conditions when building has-one relationships\n                this.relationships_dest[relation_alias].data = null;\n                this.relationships_dest[relation_alias].builded = true;\n                // tslint:disable-next-line:deprecation\n                this.relationships_dest[relation_alias].is_loading = false;\n                this.relationships_dest[relation_alias].loaded = true;\n            }\n\n            if (!relation_from_value.data) {\n                continue;\n            }\n\n            if (this.relationships_dest[relation_alias] instanceof DocumentCollection) {\n                this.__buildRelationshipHasMany(relation_from_value, relation_alias);\n            } else if (this.relationships_dest[relation_alias] instanceof DocumentResource) {\n                this.__buildRelationshipHasOne(relation_from_value, relation_alias);\n                // } else if (isDevMode()) {\n                //    console.warn(`Relation ${relation_alias} received, but doesn't exist on schema.`);\n            }\n        }\n    }\n\n    private __buildRelationshipHasMany(relation_from_value: IDataCollection, relation_alias: string) {\n        if (relation_from_value.data.length === 0) {\n            this.relationships_dest[relation_alias] = new DocumentCollection();\n            this.relationships_dest[relation_alias].builded = true;\n\n            return;\n        }\n\n        (<DocumentCollection>this.relationships_dest[relation_alias]).fill(relation_from_value);\n    }\n\n    private __buildRelationshipHasOne(relation_data_from: IDocumentResource, relation_alias: string): void {\n        // new related resource <> cached related resource <> ? delete!\n        if (!('type' in relation_data_from.data)) {\n            this.relationships_dest[relation_alias].data = [];\n\n            return;\n        }\n\n        // TODO: FE-92 --- this.is a hotfix... check and improve conditions when building has-one relationships\n        if (!this.relationships_dest[relation_alias].data) {\n            this.relationships_dest[relation_alias].data = new Resource();\n        }\n\n        if (relation_data_from.data.id !== (<Resource>this.relationships_dest[relation_alias].data).id) {\n            this.relationships_dest[relation_alias].data = new Resource();\n            // with this, fromServer dont fill relationship\n            // (<Resource>this.relationships_dest[relation_alias].data).id = relation_data_from.data.id;\n            (<Resource>this.relationships_dest[relation_alias].data).type = relation_data_from.data.type;\n        }\n\n        if (\n            (<Resource>this.relationships_dest[relation_alias].data).id !== relation_data_from.data.id ||\n            !(<Resource>this.relationships_dest[relation_alias].data).attributes ||\n            Object.keys((<Resource>this.relationships_dest[relation_alias].data).attributes).length === 0\n        ) {\n            let resource_data = this.__buildRelationship(relation_data_from.data);\n            if (resource_data) {\n                this.relationships_dest[relation_alias].data = resource_data;\n                this.relationships_dest[relation_alias].builded = true;\n            } else {\n                // NOTE: HOTFIX para cachestore, no es el lugar correcto pero no hab√≠a otra forma... me parece que hay que refactorizar...\n                (<Resource>this.relationships_dest[relation_alias].data).id = relation_data_from.data.id;\n                (<Resource>this.relationships_dest[relation_alias].data).type = relation_data_from.data.type;\n            }\n        }\n    }\n\n    private __buildRelationship(resource_data_from: IDataResource): Resource | undefined {\n        if (\n            resource_data_from.type in this.included_resources &&\n            resource_data_from.id in this.included_resources[resource_data_from.type]\n        ) {\n            // it's in included\n            let data = this.included_resources[resource_data_from.type][resource_data_from.id];\n\n            // Store the include in cache\n            CacheMemory.getInstance().setResource(data, true);\n            // this.getService(resource_data_from.type).cachestore.setResource(data);\n\n            return data;\n        } else {\n            // OPTIONAL: return cached Resource\n            let service = this.getService(resource_data_from.type);\n            let resource = CacheMemory.getInstance().getResource(resource_data_from.type, resource_data_from.id);\n            if (resource) {\n                return resource;\n            }\n        }\n    }\n}\n"]}