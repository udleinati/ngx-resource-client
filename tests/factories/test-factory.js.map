{"version":3,"file":"test-factory.js","sourceRoot":"","sources":["../../../src/tests/factories/test-factory.ts"],"names":[],"mappings":"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","sourcesContent":["import { Resource } from '../../resource';\nimport { IDataCollection } from '../../interfaces/data-collection';\nimport { IDocumentResource } from '../../interfaces/data-object';\nimport { IDocumentData } from '../../interfaces/document';\nimport { IDataResource } from '../../interfaces/data-resource';\nimport { DocumentCollection } from '../../document-collection';\nimport { DocumentResource } from '../../document-resource';\nimport { Author } from './authors.service';\nimport { Book } from './books.service';\nimport { Photo } from './photos.service';\nimport * as faker from 'faker';\n\nexport class TestFactory {\n    // NOTE: this is going to be used to merge getAuthor, getBook and getPhoto in 1 method\n    private static resource_classes_by_type = {\n        photos: Photo,\n        books: Book,\n        authors: Author\n    };\n\n    public static getResourceDocumentData(document_class: typeof Resource, include: Array<string> = [], id?: string): IDocumentData {\n        let main_resource: Resource = this[`get${document_class.name}`](id, include);\n\n        let document_data: IDocumentData = main_resource.toObject();\n        TestFactory.fillDocumentDataIncludedRelatioships(document_data, include);\n\n        return document_data;\n    }\n\n    public static getCollectionDocumentData(document_class: typeof Resource, size = 2, include: Array<string> = []): IDocumentData {\n        let main_collection: DocumentCollection = this.getCollection(document_class, size, include);\n\n        let document_data: IDocumentData = main_collection.toObject();\n        TestFactory.fillDocumentDataIncludedRelatioships(document_data, include);\n\n        return document_data;\n    }\n\n    public static getBookDocumentData() {\n        /**/\n    }\n\n    public static getPhotoDocumentData() {\n        /**/\n    }\n\n    // TODO: uncomment and complete when thinking a way to find a resource relationship's class\n    // public static getResource(resource_class: typeof Resource, id?: string, include: Array<string> = [], ttl = 0): Resource {\n    //     // NOTE: create book\n    //     let resource: Resource = new resource_class();\n    //     resource.id = this.getId(id);\n    //     resource.attributes.title = faker.name.title();\n    //\n    //     // NOTE: add author\n    //     (<IDataResource>resource.relationships.author.data) = this.getDataResourceWithType('authors');\n    //     if (include.includes('author')) {\n    //         this.includeHasOneFromService(resource, 'author', Photo);\n    //     }\n    //\n    //     // NOTE: add photos\n    //     (resource.relationships.photos.data as Array<IDataResource>).concat(this.getDataResourcesWithType('photos', 2));\n    //     if (include.includes('photos')) {\n    //         this.includeHasManyFromService(resource, 'photos', Photo);\n    //     }\n    //\n    //     return resource;\n    // }\n\n    public static getBook(id?: string, include: Array<string> = [], ttl = 0): Book {\n        // NOTE: create book\n        let book: Book = new Book();\n        book.id = this.getId(id);\n        book.ttl = ttl;\n        TestFactory.fillBookAttributes(book);\n\n        // NOTE: add author\n        (<IDataResource>book.relationships.author.data) = this.getDataResourceWithType('authors');\n        if (include.includes('author')) {\n            this.includeFromService(book, 'author', Author);\n        }\n\n        // NOTE: add photos\n        book.relationships.photos.data = book.relationships.photos.data.concat(<Array<Photo>>this.getDataResourcesWithType('photos', 2));\n        if (include.includes('photos')) {\n            this.includeFromService(book, 'photos', Photo);\n        }\n\n        return book;\n    }\n\n    public static getAuthor(id?: string, include: Array<string> = [], ttl = 0): Author {\n        // NOTE: create author\n        let author: Author = new Author();\n        author.id = this.getId(id);\n        author.ttl = ttl;\n        TestFactory.fillAuthorAttributes(author);\n\n        // NOTE: add books\n        author.relationships.books.data = author.relationships.books.data.concat(<Array<Book>>this.getDataResourcesWithType('books', 2));\n        if (include.includes('books')) {\n            this.includeFromService(author, 'books', Book);\n            for (let book of author.relationships.books.data) {\n                (<Resource>book.relationships.author.data).id = author.id;\n            }\n        }\n\n        // NOTE: add photos\n        author.relationships.photos.data = author.relationships.photos.data.concat(<Array<Photo>>(\n            this.getDataResourcesWithType('photos', 2)\n        ));\n        if (include.includes('photos')) {\n            this.includeFromService(author, 'photos', Photo);\n        }\n\n        return author;\n    }\n\n    public static getPhoto(id?: string, include: Array<string> = [], ttl = 0): Photo {\n        let photo: Photo = new Photo();\n        photo.id = this.getId(id);\n        photo.ttl = ttl;\n        TestFactory.fillPhotoAttirbutes(photo);\n\n        return photo;\n    }\n\n    public static getCollection(resources_class: typeof Resource, size: number = 2, include: Array<string> = []): DocumentCollection {\n        let collection: DocumentCollection = new DocumentCollection();\n        for (let index = 0; index < size; index++) {\n            let factory_name = `get${resources_class.name}`;\n            let resource = this[factory_name](undefined, include);\n            collection.data.push(resource);\n        }\n        collection.setBuilded(true);\n        collection.setLoaded(true);\n        collection.cache_last_update = Date.now();\n\n        return collection;\n    }\n\n    // TODO: create a dynamic attribute filler by data type and merge 3 methods in 1\n    private static fillAuthorAttributes(author: Author): Author {\n        author.attributes.name = faker.name.firstName();\n        author.attributes.date_of_birth = faker.date.past();\n        author.attributes.date_of_death = faker.date.past();\n        author.attributes.created_at = faker.date.past();\n        author.attributes.updated_at = faker.date.past();\n\n        return author;\n    }\n\n    // TODO: create a dynamic attribute filler by data type and merge 3 methods in 1\n    private static fillBookAttributes(book: Book): Book {\n        book.attributes.title = faker.name.title();\n        book.attributes.date_published = faker.date.past();\n        book.attributes.created_at = faker.date.past();\n        book.attributes.updated_at = faker.date.past();\n\n        return book;\n    }\n\n    // TODO: create a dynamic attribute filler by data type and merge 3 methods in 1\n    private static fillPhotoAttirbutes(book: Photo): Photo {\n        book.attributes.title = faker.name.title();\n        book.attributes.uri = faker.internet.url();\n        book.attributes.imageable_id = faker.random.uuid();\n        book.attributes.created_at = faker.date.past();\n        book.attributes.updated_at = faker.date.past();\n\n        return book;\n    }\n\n    private static getId(id?: string) {\n        return id || 'new_' + Math.floor(Math.random() * 10000).toString();\n    }\n\n    private static includeFromService(resource: Resource, relationship_alias: string, class_to_add: typeof Resource) {\n        let relationship = resource.relationships[relationship_alias];\n        if (!relationship) {\n            console.error(`${relationship_alias} relationship doesn't exist in ${resource.type}`);\n\n            return;\n        } else if (relationship.data && 'id' in relationship.data) {\n            this.includeHasOneFromService(resource, relationship_alias, class_to_add);\n        } else if (relationship instanceof DocumentCollection) {\n            this.includeHasManyFromService(resource, relationship_alias, class_to_add);\n        }\n    }\n\n    private static includeHasOneFromService(resource: Resource, relationship_alias: string, class_to_add: typeof Resource) {\n        let resource_to_add: Resource = new class_to_add();\n        let relationship = <DocumentResource>resource.relationships[relationship_alias];\n        if (!relationship || !relationship.data) {\n            return;\n        }\n        resource_to_add.id = relationship.data.id;\n        let fill_method = `fill${class_to_add.name}Attributes`;\n        TestFactory[fill_method](resource_to_add);\n        resource.addRelationship(resource_to_add, relationship_alias);\n    }\n\n    private static includeHasManyFromService(resource: Resource, relationship_alias: string, class_to_add: typeof Resource) {\n        let resources_to_add: Array<Resource> = [];\n        for (let resource_relatioship of (<DocumentCollection>resource.relationships[relationship_alias]).data) {\n            let resource_to_add: Resource = new class_to_add();\n            resource_to_add.id = resource_relatioship.id;\n            let fill_method = `fill${class_to_add.name}Attributes`;\n            TestFactory[fill_method](resource_to_add);\n            resources_to_add.push(resource_to_add);\n        }\n        // @TODO: cannot use addRelationships because its not working here... SHOULD BE FIXED\n        // resource.addRelationships(resources_to_add, relationship_alias);\n        resource.relationships[relationship_alias].data = resources_to_add;\n    }\n\n    private static getDataResourceWithType(type: string, id?: string): IDataResource {\n        return {\n            id: this.getId(id),\n            type: type\n        };\n    }\n\n    private static getDataResourcesWithType(type: string, qty: number): Array<IDataResource> {\n        let data_resources: Array<IDataResource> = [];\n        for (let index = 0; index < qty; index++) {\n            data_resources.push(this.getDataResourceWithType(type));\n        }\n\n        return data_resources;\n    }\n\n    // @TODO: this method was adapted after adding toObject in server mocks... check if its 100% OK\n    private static fillResourceRelationshipsInDocumentData(document_data: IDocumentData, resource: Resource, included_alias: string) {\n        if (!document_data.included) {\n            document_data.included = [];\n        }\n\n        let relationship_content: DocumentResource | DocumentCollection | IDocumentResource | IDataCollection =\n            resource.relationships[included_alias];\n\n        // @NOTE: cannot check IDocumentResource interface with instanceof\n        if (relationship_content instanceof DocumentResource || 'type' in relationship_content.data) {\n            let relation_data = (<DocumentResource | IDocumentResource>relationship_content).data;\n            if (!relation_data) {\n                console.warn('relationship content is empty');\n\n                return;\n            }\n            let resource_class = TestFactory.resource_classes_by_type[relation_data.type];\n            if (!resource_class) {\n                console.warn(`cannot find the required class for type ${relation_data.type}`);\n\n                return;\n            }\n            document_data.included.push(\n                // @TODO: improve this code... should avoid forced types and ts errors...\n                this[`get${resource_class.name}`](relation_data.id)\n            );\n            // @NOTE: cannot check IDataResource interface with instanceof\n        } else if (relationship_content instanceof DocumentCollection || relationship_content.data instanceof Array) {\n            for (let has_many_relationship of (<DocumentCollection>resource.relationships[included_alias]).data) {\n                document_data.included.push(\n                    this[`get${TestFactory.resource_classes_by_type[has_many_relationship.type].name}`](has_many_relationship.id)\n                );\n            }\n        }\n    }\n\n    private static fillDocumentDataIncludedRelatioships(document_data: IDocumentData, include: Array<string>) {\n        for (let included_alias of include) {\n            if (!document_data.included) {\n                document_data.included = [];\n            }\n            if ((<Resource>document_data.data).id) {\n                if (!(<Resource>document_data.data).relationships[included_alias].data) {\n                    continue;\n                }\n                TestFactory.fillResourceRelationshipsInDocumentData(document_data, <Resource>document_data.data, included_alias);\n\n                return;\n            }\n            for (let resource of <Array<Resource>>document_data.data) {\n                TestFactory.fillResourceRelationshipsInDocumentData(document_data, resource, included_alias);\n            }\n        }\n    }\n}\n"]}